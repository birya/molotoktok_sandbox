// –¢–∏–ø–∏ –±–ª–æ–∫—ñ–≤ —Ç–∞ —ó—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
const BLOCK_TYPES = {
    0: { color: null, solid: false, name: '', icon: '' },
    1: { color: '#8B4513', solid: true, name: '–ó–µ–º–ª—è', icon: 'üü´' },
    2: { color: '#228B22', solid: true, name: '–¢—Ä–∞–≤–∞', icon: 'üü©' },
    3: { color: '#C0C0C0', solid: true, name: '–ö–∞–º—ñ–Ω—å', icon: '‚¨ú' },
    4: { color: '#4169E1', solid: true, name: '–í–æ–¥–∞', icon: 'üü¶' },
    5: { color: '#DC143C', solid: true, name: '–õ–∞–≤–∞', icon: 'üü•' },
    6: { color: '#2F2F2F', solid: true, indestructible: true, name: '–ö–æ—Ä–µ–Ω–Ω–∞ –ø–æ—Ä–æ–¥–∞', icon: '‚¨õ' },
    7: { color: '#8B4513', solid: false, name: '–î–µ—Ä–µ–≤–∏–Ω–∞', icon: 'üü§' },
    8: { color: '#228B22', solid: false, name: '–õ–∏—Å—Ç—è', icon: 'üçÉ' },
    9: { color: '#8B4513', solid: true, door: true, name: '–î–≤–µ—Ä—ñ', icon: 'üö™' }
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–ª–æ–∫–∞–º–∏
function getBlock(x, y) {
    if (x < 0 || x >= CONFIG.WORLD_WIDTH || y < 0 || y >= CONFIG.WORLD_HEIGHT) return 0;
    return world[x][y];
}

function setBlock(x, y, type) {
    if (x >= 0 && x < CONFIG.WORLD_WIDTH && y >= 0 && y < CONFIG.WORLD_HEIGHT) {
        const current = world[x][y];
        if (type === 0 && BLOCK_TYPES[current] && BLOCK_TYPES[current].indestructible) return;
        if (type !== 0 && current !== 0) return;
        world[x][y] = type;
    }
}

function hasSupport(x, y) {
    const positions = [
        {dx: 0, dy: 1}, {dx: -1, dy: 0}, {dx: 1, dy: 0}, {dx: 0, dy: -1},
        {dx: -1, dy: 1}, {dx: 1, dy: 1}, {dx: -1, dy: -1}, {dx: 1, dy: -1}
    ];
    
    const block = getBlock(x, y);
    
    // –õ–∏—Å—Ç—è –º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
    if (block === 8) {
        // –õ–∏—Å—Ç—è –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –±—É–¥—å-—è–∫–∏–º solid –±–ª–æ–∫–æ–º –ê–ë–û –¥–µ—Ä–µ–≤–∏–Ω–æ—é
        for (let i = 0; i < positions.length; i++) {
            const checkX = x + positions[i].dx;
            const checkY = y + positions[i].dy;
            const supportBlock = getBlock(checkX, checkY);
            
            // –õ–∏—Å—Ç—è –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è solid –±–ª–æ–∫–∞–º–∏ –∞–±–æ –¥–µ—Ä–µ–≤–∏–Ω–æ—é
            if ((BLOCK_TYPES[supportBlock] && BLOCK_TYPES[supportBlock].solid) || supportBlock === 7) {
                return true;
            }
        }
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ª–∏—Å—Ç—è –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —ñ–Ω—à–∏–º –ª–∏—Å—Ç—è–º, —â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –¥–µ—Ä–µ–≤–∏–Ω–æ—é
        for (let i = 0; i < positions.length; i++) {
            const checkX = x + positions[i].dx;
            const checkY = y + positions[i].dy;
            const supportBlock = getBlock(checkX, checkY);
            
            if (supportBlock === 8) { // –Ü–Ω—à–µ –ª–∏—Å—Ç—è
                if (hasWoodSupport(checkX, checkY, 3)) {
                    return true;
                }
            }
        }
        
        return false;
    } else {
        // –ó–≤–∏—á–∞–π–Ω—ñ –±–ª–æ–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ solid –±–ª–æ–∫–∞–º–∏
        for (let i = 0; i < positions.length; i++) {
            const checkX = x + positions[i].dx;
            const checkY = y + positions[i].dy;
            const supportBlock = getBlock(checkX, checkY);
            
            if (BLOCK_TYPES[supportBlock] && BLOCK_TYPES[supportBlock].solid) {
                return true;
            }
        }
        return false;
    }
}

function hasWoodSupport(x, y, radius) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–µ—Ä–µ–≤–∏–Ω–∞ –≤ —Ä–∞–¥—ñ—É—Å—ñ
    for (let dx = -radius; dx <= radius; dx++) {
        for (let dy = -radius; dy <= radius; dy++) {
            const checkX = x + dx;
            const checkY = y + dy;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance <= radius) {
                const block = getBlock(checkX, checkY);
                if (block === 7) { // –î–µ—Ä–µ–≤–∏–Ω–∞
                    return true;
                }
            }
        }
    }
    return false;
}